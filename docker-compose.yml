version: '3.8'

services:
  # Main application with Streamlit UI
  app:
    build:
      context: .
      target: development
    ports:
      - "8501:8501"  # Streamlit
      - "8000:8000"  # API
    volumes:
      - ./logs:/home/app/logs
      - ./outputs:/home/app/outputs
      - ./config:/home/app/config
    environment:
      - RTSD_DEBUG=false
      - RTSD_LOG_LEVEL=INFO
      - RTSD_DEVICE=auto
    devices:
      - /dev/video0:/dev/video0  # Camera access
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Production API server
  api:
    build:
      context: .
      target: production
    ports:
      - "8080:8000"
    volumes:
      - ./logs:/home/app/logs
      - ./outputs:/home/app/outputs
    environment:
      - RTSD_DEBUG=false
      - RTSD_LOG_LEVEL=INFO
      - RTSD_DEVICE=auto
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 8G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Lightweight API-only service
  api-minimal:
    build:
      context: .
      target: api-only
    ports:
      - "8090:8000"
    environment:
      - PYTHONUNBUFFERED=1
    deploy:
      resources:
        limits:
          memory: 4G
    profiles:
      - minimal
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles:
      - monitoring
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
      - api
    profiles:
      - production
    restart: unless-stopped

  # Jupyter notebook for development
  jupyter:
    build:
      context: .
      target: development
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/app/notebooks
      - ./src:/home/app/src
      - ./config:/home/app/config
    environment:
      - JUPYTER_ENABLE_LAB=yes
    command: >
      jupyter lab
      --ip=0.0.0.0
      --port=8888
      --no-browser
      --allow-root
      --NotebookApp.token=''
      --NotebookApp.password=''
    profiles:
      - development
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
